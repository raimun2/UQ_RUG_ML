head(nycflights13::flights)
knitr::opts_chunk$set(echo = TRUE)
# Load required packages and data
pacman::p_load(tidyverse, tidymodels, nycflights13)
data("flights")
data(nycflights13)
# Load the NYC Flights dataset
library(nycflights13)
data(nycflights13)
data(nycflights)
data("flights")
force(flights)
? fligths
? nycflights::flights
knitr::opts_chunk$set(echo = TRUE)
data("airlines")
force(airlines)
data("planes")
force(planes)
data("weather")
force(weather)
data("airports")
force(airports)
View(airports)
data("flights") |> glimpse()
force(flights)
flights = data("flights")
data("flights")
force(flights)
flight_data <-
flights %>%
mutate(
# Convert the arrival delay to a factor
arr_delay = ifelse(arr_delay >= 30, "late", "on_time"),
arr_delay = factor(arr_delay),
# We will use the date (not date-time) in the recipe below
date = lubridate::as_date(time_hour)
) %>%
# Include the weather data
inner_join(weather, by = c("origin", "time_hour")) %>%
# Only retain the specific columns we will use
select(dep_time, flight, origin, dest, air_time, distance,
carrier, date, arr_delay, time_hour) %>%
# Exclude missing data
na.omit() %>%
# For creating models, it is better to have qualitative columns
# encoded as factors (instead of character strings)
mutate_if(is.character, as.factor)
flight_data %>%
count(arr_delay) %>%
mutate(prop = n/sum(n))
flights_rec <-
recipe(arr_delay ~ ., data = train_data) %>%
update_role(flight, time_hour, new_role = "ID") %>%
step_date(date, features = c("dow", "month")) %>%
step_holiday(date,
holidays = timeDate::listHolidays("US"),
keep_original_cols = FALSE) %>%
step_dummy(all_nominal_predictors()) %>%
step_zv(all_predictors())
flight_data <-
flights %>%
mutate(
# Convert the arrival delay to a factor
arr_delay = ifelse(arr_delay >= 30, "late", "on_time"),
arr_delay = factor(arr_delay),
# We will use the date (not date-time) in the recipe below
date = lubridate::as_date(time_hour)
) %>%
# Include the weather data
inner_join(weather, by = c("origin", "time_hour")) %>%
# Only retain the specific columns we will use
select(dep_time, flight, origin, dest, air_time, distance,
carrier, date, arr_delay, time_hour) %>%
# Exclude missing data
na.omit() %>%
# For creating models, it is better to have qualitative columns
# encoded as factors (instead of character strings)
mutate_if(is.character, as.factor)
flight_data %>%
count(arr_delay) %>%
mutate(prop = n/sum(n))
flights_rec <-
recipe(arr_delay ~ ., data = train_data) %>%
update_role(flight, time_hour, new_role = "ID") %>%
step_date(date, features = c("dow", "month")) %>%
step_holiday(date,
holidays = timeDate::listHolidays("US"),
keep_original_cols = FALSE) %>%
step_dummy(all_nominal_predictors()) %>%
step_zv(all_predictors())
library(tidymodels)
flights_rec <-
recipe(arr_delay ~ ., data = train_data) %>%
update_role(flight, time_hour, new_role = "ID") %>%
step_date(date, features = c("dow", "month")) %>%
step_holiday(date,
holidays = timeDate::listHolidays("US"),
keep_original_cols = FALSE) %>%
step_dummy(all_nominal_predictors()) %>%
step_zv(all_predictors())
install.packages("tzdb")
knitr::opts_chunk$set(echo = TRUE)
library(tidymodels)
flights_rec <-
recipe(arr_delay ~ ., data = train_data) %>%
update_role(flight, time_hour, new_role = "ID") %>%
step_date(date, features = c("dow", "month")) %>%
step_holiday(date,
holidays = timeDate::listHolidays("US"),
keep_original_cols = FALSE) %>%
step_dummy(all_nominal_predictors()) %>%
step_zv(all_predictors())
knitr::opts_chunk$set(echo = TRUE)
# Workshop Outline
## Section 1: Introduction to Machine Learning
Machine learning is a dynamic field that empowers us to model intricate relationships within data, enabling predictions and decisions without explicit programming. Its applications span a wide range of domains, from healthcare to finance and even self-driving cars.
Machine learning models primarily seek to uncover meaningful patterns within a set of input features or characteristics $\vec{x}$, ultimately aiming to predict or understand an output variable $y$. This connection is established through the application of a mathematical function, encapsulating the intricate relationships inherent in the data:
library(nycflights13)
flight_data <-
flights %>%
mutate(
# Convert the arrival delay to a factor
arr_delay = ifelse(arr_delay >= 30, "late", "on_time"),
arr_delay = factor(arr_delay),
# We will use the date (not date-time) in the recipe below
date = lubridate::as_date(time_hour)
) %>%
# Include the weather data
inner_join(weather, by = c("origin", "time_hour")) %>%
# Only retain the specific columns we will use
select(dep_time, flight, origin, dest, air_time, distance,
carrier, date, arr_delay, time_hour) %>%
# Exclude missing data
na.omit() %>%
# For creating models, it is better to have qualitative columns
# encoded as factors (instead of character strings)
mutate_if(is.character, as.factor)
library(tidyverse)
flight_data <-
flights %>%
mutate(
# Convert the arrival delay to a factor
arr_delay = ifelse(arr_delay >= 30, "late", "on_time"),
arr_delay = factor(arr_delay),
# We will use the date (not date-time) in the recipe below
date = lubridate::as_date(time_hour)
) %>%
# Include the weather data
inner_join(weather, by = c("origin", "time_hour")) %>%
# Only retain the specific columns we will use
select(dep_time, flight, origin, dest, air_time, distance,
carrier, date, arr_delay, time_hour) %>%
# Exclude missing data
na.omit() %>%
# For creating models, it is better to have qualitative columns
# encoded as factors (instead of character strings)
mutate_if(is.character, as.factor)
flight_data <-
flights %>%
mutate(
# Convert the arrival delay to a factor
arr_delay = ifelse(arr_delay >= 30, "late", "on_time"),
arr_delay = factor(arr_delay),
# We will use the date (not date-time) in the recipe below
date = lubridate::as_date(time_hour)
) %>%
# Include the weather data
inner_join(weather, by = c("origin", "time_hour")) %>%
# Only retain the specific columns we will use
select(dep_time, flight, origin, dest, air_time, distance,
carrier, date, arr_delay, time_hour) %>%
# Exclude missing data
na.omit() %>%
# For creating models, it is better to have qualitative columns
# encoded as factors (instead of character strings)
mutate_if(is.character, as.factor)
flight_data %>%
count(arr_delay) %>%
mutate(prop = n/sum(n))
library(tidymodels)
flights_rec <-
recipe(arr_delay ~ ., data = train_data) %>%
update_role(flight, time_hour, new_role = "ID") %>%
step_date(date, features = c("dow", "month")) %>%
step_holiday(date,
holidays = timeDate::listHolidays("US"),
keep_original_cols = FALSE) %>%
step_dummy(all_nominal_predictors()) %>%
step_zv(all_predictors())
data_split <- initial_split(flight_data, prop = 3/4)
# Create data frames for the two sets:
train_data <- training(data_split)
test_data  <- testing(data_split)
cv <- vfold_cv(train_data, v = 5)
library(tidymodels)
flights_rec <-
recipe(arr_delay ~ ., data = train_data) %>%
update_role(flight, time_hour, new_role = "ID") %>%
step_date(date, features = c("dow", "month")) %>%
step_holiday(date,
holidays = timeDate::listHolidays("US"),
keep_original_cols = FALSE) %>%
step_dummy(all_nominal_predictors()) %>%
step_zv(all_predictors())
model <- decision_tree() %>%
set_mode("regression") %>%
set_engine("rpart")
workflow <- workflow() %>%
add_recipe(flights_rec) %>%
add_model(model)
flights_fit <-
flights_wflow %>%
fit(data = train_data)
flights_fit <-
workflow %>%
fit(data = train_data)
model <- decision_tree() %>%
set_mode("classification") %>%
set_engine("rpart")
workflow <- workflow() %>%
add_recipe(flights_rec) %>%
add_model(model)
flights_fit <-
workflow %>%
fit(data = train_data)
flights_cv <-
workflow  %>%
fit_resamples(cv)
flights_fit %>%
augment(test_data)
flights_fit %>%
augment(test_data) %>%
roc_curve(truth = arr_delay, .pred_late) %>%
autoplot()
flights_aug %>%
roc_auc(truth = arr_delay, .pred_late)
flights_fit %>%
augment(test_data) %>%
roc_auc(truth = arr_delay, .pred_late)
flights_cv %>%
collect_metrics()
flights_fit %>%
augment(test_data) %>%
roc_auc(truth = arr_delay, .pred_late)
tune_spec <-
decision_tree(
cost_complexity = tune(),
tree_depth = tune()
) %>%
set_engine("rpart") %>%
set_mode("classification")
tree_grid <- grid_regular(cost_complexity(),
tree_depth(),
levels = 5)
tree_wf <- workflow() %>%
add_model(tune_spec) %>%
add_formula(flights_rec)
tree_wf <- workflow() %>%
add_model(tune_spec) %>%
add_recipe(flights_rec)
tree_res <-
tree_wf %>%
tune_grid(
resamples = cv,
grid = tree_grid
)
flight_data <-
flights %>%
mutate(
# Convert the arrival delay to a factor
arr_delay = ifelse(arr_delay >= 30, "late", "on_time"),
arr_delay = factor(arr_delay),
# We will use the date (not date-time) in the recipe below
date = lubridate::as_date(time_hour)
) %>%
# Include the weather data
inner_join(weather, by = c("origin", "time_hour")) %>%
# Only retain the specific columns we will use
select(dep_time, flight, origin, dest, air_time, distance,
carrier, date, arr_delay, time_hour) %>%
# Exclude missing data
na.omit() %>%
# For creating models, it is better to have qualitative columns
# encoded as factors (instead of character strings)
mutate_if(is.character, as.factor)  %>%
sample_n(10000)
flight_data %>%
count(arr_delay) %>%
mutate(prop = n/sum(n))
data_split <- initial_split(flight_data, prop = 3/4)
# Create data frames for the two sets:
train_data <- training(data_split)
test_data  <- testing(data_split)
cv <- vfold_cv(train_data, v = 5)
flights_rec <-
recipe(arr_delay ~ ., data = train_data) %>%
update_role(flight, time_hour, new_role = "ID") %>%
step_date(date, features = c("dow", "month")) %>%
step_holiday(date,
holidays = timeDate::listHolidays("US"),
keep_original_cols = FALSE) %>%
step_dummy(all_nominal_predictors()) %>%
step_zv(all_predictors())
model <- decision_tree() %>%
set_mode("classification") %>%
set_engine("rpart")
workflow <- workflow() %>%
add_recipe(flights_rec) %>%
add_model(model)
flights_fit <-
workflow %>%
fit(data = train_data)
flights_fit <-
workflow %>%
fit(data = train_data)
flights_cv <-
workflow  %>%
fit_resamples(cv)
flights_fit %>%
augment(test_data) %>%
roc_curve(truth = arr_delay, .pred_late) %>%
autoplot()
flights_fit %>%
augment(test_data) %>%
roc_auc(truth = arr_delay, .pred_late)
flights_cv %>%
collect_metrics()
tune_spec <-
decision_tree(
cost_complexity = tune(),
tree_depth = tune()
) %>%
set_engine("rpart") %>%
set_mode("classification")
tree_grid <- grid_regular(cost_complexity(),
tree_depth(),
levels = 5)
tree_wf <- workflow() %>%
add_model(tune_spec) %>%
add_recipe(flights_rec)
tree_res <-
tree_wf %>%
tune_grid(
resamples = cv,
grid = tree_grid
)
tree_res %>%
collect_metrics()
best_tree <- tree_res %>%
select_best("accuracy")
final_wf <-
tree_wf %>%
finalize_workflow(best_tree)
final_fit <-
final_wf %>%
last_fit(initial_split)
final_fit <-
final_wf %>%
last_fit(test_data)
final_fit <-
final_wf %>%
last_fit()
final_fit <-
final_wf %>%
last_fit(initial_split)
final_fit <-
final_wf %>%
fit()
final_fit <-
final_wf %>%
fit(data = train_data)
? logistic_reg()
knitr::opts_chunk$set(echo = TRUE)
library(nycflights13)
library(nycflights13)
library(tidyverse)
library(nycflights13)
library(tidyverse)
flight_data <-
flights %>%
mutate(
# Convert the arrival delay to a factor
arr_delay = ifelse(arr_delay >= 30, "late", "on_time"),
arr_delay = factor(arr_delay),
# We will use the date (not date-time) in the recipe below
date = lubridate::as_date(time_hour)
) %>%
# Include the weather data
inner_join(weather, by = c("origin", "time_hour")) %>%
# Only retain the specific columns we will use
select(dep_time, flight, origin, dest, air_time, distance,
carrier, date, arr_delay, time_hour) %>%
# Exclude missing data
na.omit() %>%
# For creating models, it is better to have qualitative columns
# encoded as factors (instead of character strings)
mutate_if(is.character, as.factor)  %>%
sample_n(10000)
flight_data %>%
count(arr_delay) %>%
mutate(prop = n/sum(n))
library(tidymodels)
library(tidymodels)
data_split <- initial_split(flight_data, prop = 3/4)
# Create data frames for the two sets:
train_data <- training(data_split)
test_data  <- testing(data_split)
cv <- vfold_cv(train_data, v = 5)
? version
version
updateR()
flights_rec <-
recipe(arr_delay ~ ., data = train_data) %>%
update_role(flight, time_hour, new_role = "ID") %>%
step_date(date, features = c("dow", "month")) %>%
step_holiday(date,
holidays = timeDate::listHolidays("US"),
keep_original_cols = FALSE) %>%
step_dummy(all_nominal_predictors()) %>%
step_zv(all_predictors())
flights_rec <-
recipe(arr_delay ~ ., data = train_data) %>%
update_role(flight, time_hour, new_role = "ID") %>%
step_date(date, features = c("dow", "month")) %>%
step_holiday(date,
holidays = timeDate::listHolidays("US"),
keep_original_cols = FALSE) %>%
step_dummy(all_nominal_predictors()) %>%
step_zv(all_predictors())
rand_forest(mode = "classification", trees = 2000)
show_engines("rand_forest")
model <- decision_tree() %>%
set_mode("classification") %>%
set_engine("rpart")
workflow <- workflow() %>%
add_recipe(flights_rec) %>%
add_model(model)
flights_fit <-
workflow %>%
fit(data = train_data)
flights_fit <-
workflow %>%
fit(data = train_data)
flights_cv <-
workflow  %>%
fit_resamples(cv)
flights_fit %>%
augment(test_data) %>%
roc_curve(truth = arr_delay, .pred_late) %>%
autoplot()
flights_fit %>%
augment(test_data) %>%
roc_auc(truth = arr_delay, .pred_late)
flights_cv %>%
collect_metrics()
tune_spec <-
decision_tree(
cost_complexity = tune(),
tree_depth = tune()
) %>%
set_engine("rpart") %>%
set_mode("classification")
tree_grid <- grid_regular(cost_complexity(),
tree_depth(),
levels = 5)
tree_wf <- workflow() %>%
add_model(tune_spec) %>%
add_recipe(flights_rec)
tree_res <-
tree_wf %>%
tune_grid(
resamples = cv,
grid = tree_grid
)
tree_res %>%
collect_metrics()
best_tree <- tree_res %>%
select_best("accuracy")
final_wf <-
tree_wf %>%
finalize_workflow(best_tree)
final_fit <-
final_wf %>%
fit(data = train_data)
